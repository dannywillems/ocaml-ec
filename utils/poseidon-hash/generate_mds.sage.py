

# This file was *autogenerated* from the file generate_mds.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 = Integer(52435875175126190479447740508185965837690552500527637822603658699938581184513); _sage_const_3 = Integer(3)# MDS Secure parameters generation based on the sufficient condition described
# in Section 8.1 of https://eprint.iacr.org/2020/500.

# Applies the condition of Proposition 13
def secure_MDS(M):
    f = M.minimal_polynomial()
    print(f)
    return f.degree() == M.ncols() and f.is_irreducible() and f.is_primitive()

# Generates a secure matrix of size t x t with coefficients over field K
def generate_MDS(K, t):
    i = _sage_const_0 
    secure = False
    while not secure:
        print(i)
        M = matrix([[K.random_element() for i in range(t)] for j in range(t)])
        secure = secure_MDS(M)
        i = i + _sage_const_1 
    return M

if __name__ == '__main__':
    set_random_seed(int(b'Nomadic-Labs'.hex(), base = _sage_const_16 ))
    p = _sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 
    K = GF(p)
    print(generate_MDS(K, _sage_const_3 ))

